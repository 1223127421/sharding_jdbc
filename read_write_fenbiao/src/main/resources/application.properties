server.port=8080
spring.application.name=read_write_fenbiao
spring.server.servlet.context-path=/
#如果bean重复，则覆盖
spring.main.allow-bean-definition-overriding=true
#驼峰式
mybatis.configuration.map-underscore-to-camel-case=true
#定义多个数据源
spring.shardingsphere.datasource.names=master,slave
#
spring.shardingsphere.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master.url=jdbc:mysql://localhost:3306/read_write_fenbiao?characterEncoding=utf-8
spring.shardingsphere.datasource.master.username=root
spring.shardingsphere.datasource.master.password=root
#
spring.shardingsphere.datasource.slave.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave.url=jdbc:mysql://localhost:3307/read_write_fenbiao?characterEncoding=utf-8
spring.shardingsphere.datasource.slave.username=root
spring.shardingsphere.datasource.slave.password=root
# 读写分离配置，load-balance-algorithm-type用于配置从库负载均衡算法类型：ROUND_ROBIN(轮询)，RANDOM（随机）
spring.shardingsphere.masterslave.load-balance-algorithm-type=round_robin
# 最终的数据源
spring.shardingsphere.masterslave.name=ms
#这里配置读写分离的时候一定要记得添加主库的数据源名称 这里为master0
spring.shardingsphere.sharding.master-slave-rules.read_write.master-data-source-name=master
spring.shardingsphere.sharding.master-slave-rules.read_write.slave-data-source-names=slave
#数据分表规则
#指定所需分的表,前面的t_order_是逻辑表
spring.shardingsphere.sharding.tables.t_order_.actual-data-nodes=read_write.t_order_$->{1..2}
#指定主键
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.sharding-column=order_id
#分表规则为主键除以2取模（分片算法）
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2+1}
#打印sql
spring.shardingsphere.props.sql.show=true
#自定义参数
#雪花算法分布式全局唯一ID生成器：机器ID（machineId），数据标识ID（datacenterId）
#注意：二者的值不要超过32，即0-31即可
IdWorker.machineId=2
IdWorker.datacenterId=3
