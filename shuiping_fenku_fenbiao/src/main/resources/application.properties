server.port=8080
spring.application.name=shuiping_fenku_fenbiao
spring.server.servlet.context-path=/
#如果bean重复，则覆盖
spring.main.allow-bean-definition-overriding=true
#驼峰式
mybatis.configuration.map-underscore-to-camel-case=true
#定义多个数据源
spring.shardingsphere.datasource.names=fenku1,fenku2
#
spring.shardingsphere.datasource.fenku1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.fenku1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.fenku1.url=jdbc:mysql://localhost:3306/sharding_shuiping_fenku_order_1?characterEncoding=utf-8
spring.shardingsphere.datasource.fenku1.username=root
spring.shardingsphere.datasource.fenku1.password=root
#
spring.shardingsphere.datasource.fenku2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.fenku2.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.fenku2.url=jdbc:mysql://localhost:3306/sharding_shuiping_fenku_order_2?characterEncoding=utf-8
spring.shardingsphere.datasource.fenku2.username=root
spring.shardingsphere.datasource.fenku2.password=root
#定义分库策略，以user_id为分片键,插入数据时通过user_id确定插入哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=fenku$->{user_id%2+1}
#数据分表规则
spring.shardingsphere.sharding.tables.t_order_.actual-data-nodes=fenku$->{1..2}.t_order_$->{1..2}
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2+1}
spring.shardingsphere.sharding.tables.t_order_.key-generator.column=order_id
spring.shardingsphere.sharding.tables.t_order_.key-generator.type=SNOWFLAKE
# 指定sys_dict为公共表，即每个库里面都有的表
spring.shardingsphere.sharding.broadcast-tables=sys_dict
#打印sql
spring.shardingsphere.props.sql.show=true

