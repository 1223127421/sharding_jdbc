server.port=8080
spring.application.name=read_write_fenku_fenbiao
spring.server.servlet.context-path=/
#如果bean重复，则覆盖
spring.main.allow-bean-definition-overriding=true
#驼峰式
mybatis.configuration.map-underscore-to-camel-case=true
#定义多个数据源
spring.shardingsphere.datasource.names=master0,slave0,master1,slave1,
#
spring.shardingsphere.datasource.master0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master0.url=jdbc:mysql://localhost:3306/read_write_fenku_fenbiao1?characterEncoding=utf-8
spring.shardingsphere.datasource.master0.username=root
spring.shardingsphere.datasource.master0.password=root
#
spring.shardingsphere.datasource.master1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.master1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.master1.url=jdbc:mysql://localhost:3306/read_write_fenku_fenbiao2?characterEncoding=utf-8
spring.shardingsphere.datasource.master1.username=root
spring.shardingsphere.datasource.master1.password=root
#
spring.shardingsphere.datasource.slave0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave0.url=jdbc:mysql://localhost:3307/read_write_fenku_fenbiao1?characterEncoding=utf-8
spring.shardingsphere.datasource.slave0.username=root
spring.shardingsphere.datasource.slave0.password=root
#
spring.shardingsphere.datasource.slave1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.slave1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.slave1.url=jdbc:mysql://localhost:3307/read_write_fenku_fenbiao2?characterEncoding=utf-8
spring.shardingsphere.datasource.slave1.username=root
spring.shardingsphere.datasource.slave1.password=root
#
#指定master0为主库，slave0为它的从库
spring.shardingsphere.sharding.master-slave-rules.read_write1.master-data-source-name=master0
spring.shardingsphere.sharding.master-slave-rules.read_write1.slave-data-source-names=slave0
#指定master1为主库，slave1为它的从库
spring.shardingsphere.sharding.master-slave-rules.read_write2.master-data-source-name=master1
spring.shardingsphere.sharding.master-slave-rules.read_write2.slave-data-source-names=slave1
#
#根据user_id分库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=read_write$->{user_id % 2+1}
#
#根据order_id分表
#指定所需分的表,前面的t_order_是逻辑表
spring.shardingsphere.sharding.tables.t_order_.actual-data-nodes=read_write$->{1..2}.t_order_$->{1..2}
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.t_order_.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 2+1}
#打印sql
spring.shardingsphere.props.sql.show=true
#自定义参数
#雪花算法分布式全局唯一ID生成器：机器ID（machineId），数据标识ID（datacenterId）
#注意：二者的值不要超过32，即0-31即可
IdWorker.machineId=3
IdWorker.datacenterId=3

